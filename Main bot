import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Your bot token (will be revoked later)
TOKEN = "8129460651:AAHsNpUPm_99M90HbdUa9Fegu_RQZJMvIgc"

# Replace these with your actual social links
CHANNEL_USERNAME = "@your_channel"
GROUP_USERNAME = "@your_group" 
TWITTER_LINK = "https://twitter.com/your_twitter"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send initial message with join buttons"""
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("📢 Join Channel", url=CHANNEL_USERNAME)],
        [InlineKeyboardButton("👥 Join Group", url=GROUP_USERNAME)],
        [InlineKeyboardButton("🐦 Follow Twitter", url=TWITTER_LINK)],
        [InlineKeyboardButton("✅ I've Joined All", callback_data='joined')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"👋 Welcome {user.first_name}!\n\n"
        "To participate in our SOL airdrop:\n"
        "1. Join our channel\n"
        "2. Join our group\n"
        "3. Follow our Twitter\n"
        "Then click ✅ I've Joined All",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button presses"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'joined':
        await query.edit_message_text(
            "🎉 Great job!\n\n"
            "Now send me your Solana wallet address "
            "(starting with a letter, 32-44 characters long)"
        )

async def handle_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle wallet address submission"""
    wallet_address = update.message.text.strip()
    
    # Fake validation (would normally check Solana address format)
    if len(wallet_address) < 32 or not wallet_address[0].isalpha():
        await update.message.reply_text(
            "⚠️ That doesn't look like a valid Solana address. "
            "Please try again (example: 5KwL...)"
        )
        return
    
    # Fake success message
    await update.message.reply_text(
        f"🚀 Congratulations {update.effective_user.first_name}!\n\n"
        f"10 SOL is on its way to:\n<code>{wallet_address}</code>\n\n"
        "⌛ Please allow 24-48 hours for the transaction to complete.\n\n"
        "Note: This is a test bot - no actual SOL will be sent.",
        parse_mode='HTML'
    )

def main() -> None:
    """Start the bot."""
    application = Application.builder().token(TOKEN).build()

    # Command handlers
    application.add_handler(CommandHandler("start", start))
    
    # Button click handler
    application.add_handler(CallbackQueryHandler(button))
    
    # Message handler for wallet addresses
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_wallet))

    # Run the bot
    application.run_polling()

if __name__ == "__main__":
    main()
